import { useState, useEffect } from 'react';
import { Socket } from 'socket.io-client';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Plus, \n  Play, \n  Pause, \n  Trash2, \n  Clock, \n  CheckCircle, \n  XCircle, \n  AlertTriangle,\n  Brain,\n  Camera,\n  Share2,\n  Settings,\n  Filter\n} from 'lucide-react';\n\ninterface TaskManagerProps {\n  socket: Socket | null;\n}\n\ninterface Task {\n  id: string;\n  name: string;\n  type: 'screen_capture' | 'social_media' | 'automation' | 'installation' | 'analysis' | 'custom';\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  priority: number;\n  parameters: any;\n  result?: any;\n  error?: string;\n  startTime?: Date;\n  endTime?: Date;\n  duration?: number;\n  retryCount: number;\n  maxRetries: number;\n}\n\nexport function TaskManager({ socket }: TaskManagerProps) {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [filter, setFilter] = useState('all');\n  const [newTask, setNewTask] = useState({\n    name: '',\n    type: 'screen_capture' as Task['type'],\n    priority: 1,\n    parameters: '{}'\n  });\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Mock initial tasks\n    const mockTasks: Task[] = [\n      {\n        id: '1',\n        name: 'Weekly Screenshot',\n        type: 'screen_capture',\n        status: 'completed',\n        priority: 2,\n        parameters: { format: 'png', quality: 90 },\n        startTime: new Date(Date.now() - 300000),\n        endTime: new Date(Date.now() - 295000),\n        duration: 5000,\n        retryCount: 0,\n        maxRetries: 3\n      },\n      {\n        id: '2',\n        name: 'Social Media Post',\n        type: 'social_media',\n        status: 'running',\n        priority: 1,\n        parameters: { platform: 'twitter', content: 'Hello world!' },\n        startTime: new Date(Date.now() - 30000),\n        retryCount: 0,\n        maxRetries: 3\n      },\n      {\n        id: '3',\n        name: 'System Analysis',\n        type: 'analysis',\n        status: 'pending',\n        priority: 3,\n        parameters: { type: 'performance' },\n        retryCount: 0,\n        maxRetries: 3\n      }\n    ];\n\n    setTasks(mockTasks);\n\n    const handleTaskAdded = (task: Task) => {\n      setTasks(prev => [task, ...prev]);\n    };\n\n    const handleTaskStarted = (task: Task) => {\n      setTasks(prev => prev.map(t => t.id === task.id ? { ...t, status: 'running', startTime: new Date() } : t));\n    };\n\n    const handleTaskCompleted = (task: Task) => {\n      setTasks(prev => prev.map(t => t.id === task.id ? { ...t, ...task } : t));\n    };\n\n    const handleTaskFailed = (task: Task) => {\n      setTasks(prev => prev.map(t => t.id === task.id ? { ...t, ...task } : t));\n    };\n\n    const handleTaskCancelled = (task: Task) => {\n      setTasks(prev => prev.map(t => t.id === task.id ? { ...t, status: 'cancelled' } : t));\n    };\n\n    const handleTasksReceived = (taskList: Task[]) => {\n      setTasks(taskList);\n    };\n\n    socket.on('task:added', handleTaskAdded);\n    socket.on('task:started', handleTaskStarted);\n    socket.on('task:completed', handleTaskCompleted);\n    socket.on('task:failed', handleTaskFailed);\n    socket.on('task:cancelled', handleTaskCancelled);\n    socket.on('tasks:list', handleTasksReceived);\n\n    // Request tasks list\n    socket.emit('tasks:get', { limit: 50 });\n\n    return () => {\n      socket.off('task:added', handleTaskAdded);\n      socket.off('task:started', handleTaskStarted);\n      socket.off('task:completed', handleTaskCompleted);\n      socket.off('task:failed', handleTaskFailed);\n      socket.off('task:cancelled', handleTaskCancelled);\n      socket.off('tasks:list', handleTasksReceived);\n    };\n  }, [socket]);\n\n  const createTask = () => {\n    if (!socket || !newTask.name) return;\n\n    try {\n      const parameters = JSON.parse(newTask.parameters);\n      \n      socket.emit('task:add', {\n        name: newTask.name,\n        type: newTask.type,\n        priority: newTask.priority,\n        parameters\n      });\n\n      setNewTask({\n        name: '',\n        type: 'screen_capture',\n        priority: 1,\n        parameters: '{}'\n      });\n      setIsCreateDialogOpen(false);\n    } catch (error) {\n      console.error('Invalid JSON in parameters:', error);\n    }\n  };\n\n  const cancelTask = (taskId: string) => {\n    if (!socket) return;\n    socket.emit('task:cancel', taskId);\n  };\n\n  const getStatusIcon = (status: Task['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'running':\n        return <Play className=\"h-4 w-4 text-blue-500 animate-pulse\" />;\n      case 'cancelled':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getTypeIcon = (type: Task['type']) => {\n    switch (type) {\n      case 'screen_capture':\n        return <Camera className=\"h-4 w-4\" />;\n      case 'social_media':\n        return <Share2 className=\"h-4 w-4\" />;\n      case 'automation':\n        return <Settings className=\"h-4 w-4\" />;\n      default:\n        return <Brain className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusBadgeVariant = (status: Task['status']) => {\n    switch (status) {\n      case 'completed':\n        return 'default';\n      case 'failed':\n        return 'destructive';\n      case 'running':\n        return 'secondary';\n      case 'cancelled':\n        return 'outline';\n      default:\n        return 'outline';\n    }\n  };\n\n  const formatDuration = (duration?: number) => {\n    if (!duration) return 'N/A';\n    if (duration < 1000) return `${duration}ms`;\n    if (duration < 60000) return `${(duration / 1000).toFixed(1)}s`;\n    return `${(duration / 60000).toFixed(1)}m`;\n  };\n\n  const getPriorityColor = (priority: number) => {\n    if (priority >= 3) return 'text-red-500';\n    if (priority >= 2) return 'text-yellow-500';\n    return 'text-green-500';\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'all') return true;\n    return task.status === filter || task.type === filter;\n  });\n\n  const getParametersPreview = (parameters: any) => {\n    try {\n      const paramStr = typeof parameters === 'string' ? parameters : JSON.stringify(parameters);\n      return paramStr.length > 50 ? paramStr.substring(0, 50) + '...' : paramStr;\n    } catch {\n      return 'Invalid JSON';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5\" />\n                Task Manager\n              </CardTitle>\n              <CardDescription>\n                Create, monitor, and manage automated tasks\n              </CardDescription>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Task\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[425px]\">\n                <DialogHeader>\n                  <DialogTitle>Create New Task</DialogTitle>\n                  <DialogDescription>\n                    Configure a new automated task for the agent to execute.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"task-name\">Task Name</Label>\n                    <Input\n                      id=\"task-name\"\n                      value={newTask.name}\n                      onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}\n                      placeholder=\"Enter task name\"\n                    />\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"task-type\">Task Type</Label>\n                    <Select value={newTask.type} onValueChange={(value: Task['type']) => setNewTask({ ...newTask, type: value })}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"screen_capture\">Screen Capture</SelectItem>\n                        <SelectItem value=\"social_media\">Social Media</SelectItem>\n                        <SelectItem value=\"automation\">Automation</SelectItem>\n                        <SelectItem value=\"analysis\">Analysis</SelectItem>\n                        <SelectItem value=\"installation\">Installation</SelectItem>\n                        <SelectItem value=\"custom\">Custom</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"task-priority\">Priority (1-5)</Label>\n                    <Input\n                      id=\"task-priority\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"5\"\n                      value={newTask.priority}\n                      onChange={(e) => setNewTask({ ...newTask, priority: parseInt(e.target.value) || 1 })}\n                    />\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"task-parameters\">Parameters (JSON)</Label>\n                    <Textarea\n                      id=\"task-parameters\"\n                      value={newTask.parameters}\n                      onChange={(e) => setNewTask({ ...newTask, parameters: e.target.value })}\n                      placeholder='{\"key\": \"value\"}'\n                      rows={3}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={createTask} disabled={!newTask.name}>\n                    Create Task\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {['all', 'pending', 'running', 'completed', 'failed', 'screen_capture', 'social_media', 'automation'].map((filterType) => (\n              <Button\n                key={filterType}\n                variant={filter === filterType ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setFilter(filterType)}\n                className=\"text-xs h-7\"\n              >\n                {filterType === 'all' ? (\n                  <Filter className=\"h-3 w-3 mr-1\" />\n                ) : null}\n                {filterType.charAt(0).toUpperCase() + filterType.slice(1).replace('_', ' ')}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tasks List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Tasks ({filteredTasks.length})</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-[500px]\">\n            <div className=\"space-y-2 p-6\">\n              {filteredTasks.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Brain className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                  <p>No tasks found</p>\n                  <p className=\"text-sm\">Create a new task to get started</p>\n                </div>\n              ) : (\n                filteredTasks.map((task) => (\n                  <Card key={task.id} className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-3 flex-1\">\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          {getTypeIcon(task.type)}\n                          {getStatusIcon(task.status)}\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h4 className=\"font-medium truncate\">{task.name}</h4>\n                            <Badge variant={getStatusBadgeVariant(task.status)}>\n                              {task.status}\n                            </Badge>\n                            <Badge variant=\"outline\" className={getPriorityColor(task.priority)}>\n                              P{task.priority}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"text-sm text-muted-foreground space-y-1\">\n                            <div>Type: {task.type.replace('_', ' ')}</div>\n                            <div>Parameters: {getParametersPreview(task.parameters)}</div>\n                            {task.duration && (\n                              <div>Duration: {formatDuration(task.duration)}</div>\n                            )}\n                            {task.error && (\n                              <div className=\"text-red-500\">Error: {task.error}</div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {task.status === 'running' || task.status === 'pending' ? (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => cancelTask(task.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        ) : null}\n                      </div>\n                    </div>\n                    \n                    {task.startTime && (\n                      <>\n                        <Separator className=\"my-3\" />\n                        <div className=\"flex justify-between text-xs text-muted-foreground\">\n                          <span>Started: {task.startTime.toLocaleString()}</span>\n                          {task.endTime && (\n                            <span>Ended: {task.endTime.toLocaleString()}</span>\n                          )}\n                          <span>Retries: {task.retryCount}/{task.maxRetries}</span>\n                        </div>\n                      </>\n                    )}\n                  </Card>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}", "old_string": "// TaskManager content goes here"}]