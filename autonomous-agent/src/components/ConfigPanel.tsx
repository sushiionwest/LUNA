import { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Slider } from '@/components/ui/slider';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Settings, \n  Save, \n  RotateCcw, \n  Key, \n  Database,\n  Bot,\n  Camera,\n  Share2,\n  Shield,\n  Zap,\n  AlertTriangle,\n  CheckCircle,\n  ExternalLink\n} from 'lucide-react';\n\ninterface ConfigPanelProps {\n  socket: Socket | null;\n}\n\ninterface AgentConfig {\n  maxConcurrentTasks: number;\n  taskTimeout: number;\n  retryAttempts: number;\n  screenCaptureInterval: number;\n  autoRetry: boolean;\n  safeMode: boolean;\n}\n\ninterface APIConfig {\n  microsoftVision: {\n    enabled: boolean;\n    region: string;\n  };\n  twitter: {\n    enabled: boolean;\n  };\n  instagram: {\n    enabled: boolean;\n  };\n  linkedin: {\n    enabled: boolean;\n  };\n}\n\ninterface SystemConfig {\n  environment: string;\n  logLevel: string;\n  maxLogEntries: number;\n  backupEnabled: boolean;\n  maintenanceMode: boolean;\n}\n\nexport function ConfigPanel({ socket }: ConfigPanelProps) {\n  const [agentConfig, setAgentConfig] = useState<AgentConfig>({\n    maxConcurrentTasks: 3,\n    taskTimeout: 300000,\n    retryAttempts: 3,\n    screenCaptureInterval: 1000,\n    autoRetry: true,\n    safeMode: true\n  });\n  \n  const [apiConfig, setApiConfig] = useState<APIConfig>({\n    microsoftVision: {\n      enabled: false,\n      region: 'eastus'\n    },\n    twitter: {\n      enabled: false\n    },\n    instagram: {\n      enabled: false\n    },\n    linkedin: {\n      enabled: false\n    }\n  });\n  \n  const [systemConfig, setSystemConfig] = useState<SystemConfig>({\n    environment: 'development',\n    logLevel: 'info',\n    maxLogEntries: 1000,\n    backupEnabled: true,\n    maintenanceMode: false\n  });\n  \n  const [apiKeys, setApiKeys] = useState({\n    microsoftVisionKey: '',\n    microsoftVisionEndpoint: '',\n    twitterApiKey: '',\n    twitterApiSecret: '',\n    twitterAccessToken: '',\n    twitterAccessTokenSecret: '',\n    instagramAccessToken: '',\n    linkedinClientId: '',\n    linkedinAccessToken: ''\n  });\n  \n  const [isSaving, setIsSaving] = useState(false);\n  const [saveMessage, setSaveMessage] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState('agent');\n\n  useEffect(() => {\n    if (!socket) return;\n\n    const handleConfigUpdated = () => {\n      setSaveMessage('Configuration updated successfully!');\n      setTimeout(() => setSaveMessage(null), 3000);\n    };\n\n    const handleError = (error: { message: string }) => {\n      setSaveMessage(`Error: ${error.message}`);\n      setTimeout(() => setSaveMessage(null), 5000);\n    };\n\n    socket.on('config:updated', handleConfigUpdated);\n    socket.on('error', handleError);\n\n    return () => {\n      socket.off('config:updated', handleConfigUpdated);\n      socket.off('error', handleError);\n    };\n  }, [socket]);\n\n  const saveAgentConfig = () => {\n    if (!socket) return;\n    \n    setIsSaving(true);\n    socket.emit('config:update', {\n      maxConcurrentTasks: agentConfig.maxConcurrentTasks,\n      ...agentConfig\n    });\n    \n    setTimeout(() => setIsSaving(false), 1000);\n  };\n\n  const resetToDefaults = () => {\n    setAgentConfig({\n      maxConcurrentTasks: 3,\n      taskTimeout: 300000,\n      retryAttempts: 3,\n      screenCaptureInterval: 1000,\n      autoRetry: true,\n      safeMode: true\n    });\n    \n    setSystemConfig({\n      environment: 'development',\n      logLevel: 'info',\n      maxLogEntries: 1000,\n      backupEnabled: true,\n      maintenanceMode: false\n    });\n  };\n\n  const testAPIConnection = async (api: string) => {\n    console.log(`Testing ${api} API connection...`);\n    // This would implement actual API testing\n    setSaveMessage(`${api} API connection test completed`);\n    setTimeout(() => setSaveMessage(null), 3000);\n  };\n\n  const formatTimeout = (ms: number) => {\n    if (ms < 60000) return `${ms / 1000}s`;\n    return `${ms / 60000}m`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Configuration\n              </CardTitle>\n              <CardDescription>\n                Configure agent behavior, API integrations, and system settings\n              </CardDescription>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" onClick={resetToDefaults}>\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Reset\n              </Button>\n              <Button onClick={saveAgentConfig} disabled={isSaving}>\n                <Save className=\"h-4 w-4 mr-2\" />\n                {isSaving ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </div>\n          </div>\n          \n          {saveMessage && (\n            <Alert className={saveMessage.includes('Error') ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'}>\n              <AlertDescription className={saveMessage.includes('Error') ? 'text-red-800' : 'text-green-800'}>\n                {saveMessage}\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardHeader>\n      </Card>\n\n      {/* Configuration Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"agent\" className=\"flex items-center gap-2\">\n            <Bot className=\"h-4 w-4\" />\n            Agent\n          </TabsTrigger>\n          <TabsTrigger value=\"apis\" className=\"flex items-center gap-2\">\n            <Key className=\"h-4 w-4\" />\n            APIs\n          </TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n            <Database className=\"h-4 w-4\" />\n            System\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Security\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Agent Configuration */}\n        <TabsContent value=\"agent\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Agent Behavior</CardTitle>\n              <CardDescription>\n                Configure how the autonomous agent operates\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label>Max Concurrent Tasks: {agentConfig.maxConcurrentTasks}</Label>\n                  <Slider\n                    value={[agentConfig.maxConcurrentTasks]}\n                    onValueChange={([value]) => setAgentConfig({ ...agentConfig, maxConcurrentTasks: value })}\n                    max={10}\n                    min={1}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Maximum number of tasks that can run simultaneously\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Retry Attempts: {agentConfig.retryAttempts}</Label>\n                  <Slider\n                    value={[agentConfig.retryAttempts]}\n                    onValueChange={([value]) => setAgentConfig({ ...agentConfig, retryAttempts: value })}\n                    max={10}\n                    min={0}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Number of retry attempts for failed tasks\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Task Timeout: {formatTimeout(agentConfig.taskTimeout)}</Label>\n                <Slider\n                  value={[agentConfig.taskTimeout]}\n                  onValueChange={([value]) => setAgentConfig({ ...agentConfig, taskTimeout: value })}\n                  max={1800000} // 30 minutes\n                  min={30000}   // 30 seconds\n                  step={30000}  // 30 second steps\n                  className=\"w-full\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Maximum time to wait for task completion\n                </p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Screen Capture Interval: {agentConfig.screenCaptureInterval}ms</Label>\n                <Slider\n                  value={[agentConfig.screenCaptureInterval]}\n                  onValueChange={([value]) => setAgentConfig({ ...agentConfig, screenCaptureInterval: value })}\n                  max={5000}\n                  min={100}\n                  step={100}\n                  className=\"w-full\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Interval between screen captures during monitoring\n                </p>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Auto Retry</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Automatically retry failed tasks\n                    </p>\n                  </div>\n                  <Switch\n                    checked={agentConfig.autoRetry}\n                    onCheckedChange={(checked) => setAgentConfig({ ...agentConfig, autoRetry: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Safe Mode</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable additional safety checks and confirmations\n                    </p>\n                  </div>\n                  <Switch\n                    checked={agentConfig.safeMode}\n                    onCheckedChange={(checked) => setAgentConfig({ ...agentConfig, safeMode: checked })}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* API Configuration */}\n        <TabsContent value=\"apis\" className=\"space-y-6\">\n          {/* Microsoft Vision API */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Camera className=\"h-5 w-5\" />\n                    Microsoft Vision API\n                  </CardTitle>\n                  <CardDescription>\n                    Computer vision and image analysis capabilities\n                  </CardDescription>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={apiConfig.microsoftVision.enabled ? 'default' : 'secondary'}>\n                    {apiConfig.microsoftVision.enabled ? 'Enabled' : 'Disabled'}\n                  </Badge>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => testAPIConnection('Microsoft Vision')}\n                  >\n                    Test\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Enable Microsoft Vision API</Label>\n                <Switch\n                  checked={apiConfig.microsoftVision.enabled}\n                  onCheckedChange={(checked) => \n                    setApiConfig({ \n                      ...apiConfig, \n                      microsoftVision: { ...apiConfig.microsoftVision, enabled: checked }\n                    })\n                  }\n                />\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label>Subscription Key</Label>\n                  <Input\n                    type=\"password\"\n                    value={apiKeys.microsoftVisionKey}\n                    onChange={(e) => setApiKeys({ ...apiKeys, microsoftVisionKey: e.target.value })}\n                    placeholder=\"Enter your subscription key\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Endpoint URL</Label>\n                  <Input\n                    value={apiKeys.microsoftVisionEndpoint}\n                    onChange={(e) => setApiKeys({ ...apiKeys, microsoftVisionEndpoint: e.target.value })}\n                    placeholder=\"https://your-region.api.cognitive.microsoft.com/\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Region</Label>\n                <Select \n                  value={apiConfig.microsoftVision.region} \n                  onValueChange={(value) => \n                    setApiConfig({ \n                      ...apiConfig, \n                      microsoftVision: { ...apiConfig.microsoftVision, region: value }\n                    })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"eastus\">East US</SelectItem>\n                    <SelectItem value=\"westus2\">West US 2</SelectItem>\n                    <SelectItem value=\"westeurope\">West Europe</SelectItem>\n                    <SelectItem value=\"southeastasia\">Southeast Asia</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Twitter API */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Share2 className=\"h-5 w-5\" />\n                    Twitter API\n                  </CardTitle>\n                  <CardDescription>\n                    Social media posting and engagement\n                  </CardDescription>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={apiConfig.twitter.enabled ? 'default' : 'secondary'}>\n                    {apiConfig.twitter.enabled ? 'Enabled' : 'Disabled'}\n                  </Badge>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => testAPIConnection('Twitter')}\n                  >\n                    Test\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Enable Twitter API</Label>\n                <Switch\n                  checked={apiConfig.twitter.enabled}\n                  onCheckedChange={(checked) => \n                    setApiConfig({ ...apiConfig, twitter: { enabled: checked } })\n                  }\n                />\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label>API Key</Label>\n                  <Input\n                    type=\"password\"\n                    value={apiKeys.twitterApiKey}\n                    onChange={(e) => setApiKeys({ ...apiKeys, twitterApiKey: e.target.value })}\n                    placeholder=\"Enter API key\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>API Secret</Label>\n                  <Input\n                    type=\"password\"\n                    value={apiKeys.twitterApiSecret}\n                    onChange={(e) => setApiKeys({ ...apiKeys, twitterApiSecret: e.target.value })}\n                    placeholder=\"Enter API secret\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Access Token</Label>\n                  <Input\n                    type=\"password\"\n                    value={apiKeys.twitterAccessToken}\n                    onChange={(e) => setApiKeys({ ...apiKeys, twitterAccessToken: e.target.value })}\n                    placeholder=\"Enter access token\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Access Token Secret</Label>\n                  <Input\n                    type=\"password\"\n                    value={apiKeys.twitterAccessTokenSecret}\n                    onChange={(e) => setApiKeys({ ...apiKeys, twitterAccessTokenSecret: e.target.value })}\n                    placeholder=\"Enter access token secret\"\n                  />\n                </div>\n              </div>\n              \n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  You need a Twitter Developer account to obtain these credentials.\n                  <Button variant=\"link\" className=\"h-auto p-0 ml-1\">\n                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                    Get Twitter API access\n                  </Button>\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* System Configuration */}\n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Settings</CardTitle>\n              <CardDescription>\n                Core system configuration and maintenance options\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label>Environment</Label>\n                  <Select value={systemConfig.environment} onValueChange={(value) => \n                    setSystemConfig({ ...systemConfig, environment: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"development\">Development</SelectItem>\n                      <SelectItem value=\"staging\">Staging</SelectItem>\n                      <SelectItem value=\"production\">Production</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Log Level</Label>\n                  <Select value={systemConfig.logLevel} onValueChange={(value) => \n                    setSystemConfig({ ...systemConfig, logLevel: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"error\">Error</SelectItem>\n                      <SelectItem value=\"warn\">Warning</SelectItem>\n                      <SelectItem value=\"info\">Info</SelectItem>\n                      <SelectItem value=\"debug\">Debug</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Max Log Entries: {systemConfig.maxLogEntries}</Label>\n                <Slider\n                  value={[systemConfig.maxLogEntries]}\n                  onValueChange={([value]) => setSystemConfig({ ...systemConfig, maxLogEntries: value })}\n                  max={10000}\n                  min={100}\n                  step={100}\n                  className=\"w-full\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Maximum number of log entries to retain\n                </p>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Backup Enabled</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Automatically backup configuration and data\n                    </p>\n                  </div>\n                  <Switch\n                    checked={systemConfig.backupEnabled}\n                    onCheckedChange={(checked) => setSystemConfig({ ...systemConfig, backupEnabled: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Maintenance Mode</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Temporarily disable all agent operations\n                    </p>\n                  </div>\n                  <Switch\n                    checked={systemConfig.maintenanceMode}\n                    onCheckedChange={(checked) => setSystemConfig({ ...systemConfig, maintenanceMode: checked })}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Configuration */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Security Settings\n              </CardTitle>\n              <CardDescription>\n                Configure security policies and access controls\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <Alert>\n                <CheckCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Security features are currently in development. Basic protection is active.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"space-y-4\">\n                <div className=\"p-4 border rounded-lg bg-muted/20\">\n                  <h4 className=\"font-medium mb-2\">Current Security Status</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>API Key Encryption:</span>\n                      <Badge variant=\"default\">Active</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>HTTPS/WSS:</span>\n                      <Badge variant=\"default\">Active</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Rate Limiting:</span>\n                      <Badge variant=\"default\">Active</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Input Validation:</span>\n                      <Badge variant=\"default\">Active</Badge>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Additional security features including:</p>\n                  <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                    <li>Multi-factor authentication</li>\n                    <li>Role-based access control</li>\n                    <li>Audit logging</li>\n                    <li>Advanced threat detection</li>\n                  </ul>\n                  <p className=\"mt-2\">Will be available in future updates.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}", "old_string": "// ConfigPanel content goes here"}]