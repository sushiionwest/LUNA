import { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { \n  Share2, \n  Twitter, \n  Instagram, \n  Linkedin, \n  Image as ImageIcon, \n  Send, \n  Calendar,\n  Zap,\n  Eye,\n  Heart,\n  MessageCircle,\n  Repeat2,\n  TrendingUp,\n  Upload,\n  Sparkles\n} from 'lucide-react';\n\ninterface SocialMediaProps {\n  socket: Socket | null;\n}\n\ninterface Platform {\n  name: string;\n  displayName: string;\n  available: boolean;\n  features: string[];\n  limits: {\n    textLength: number;\n    mediaCount: number;\n    mediaSize: string;\n  };\n  note?: string;\n}\n\ninterface PostData {\n  content: string;\n  platform: string;\n  mediaFiles: File[];\n  scheduledFor?: string;\n}\n\ninterface ContentGenerationOptions {\n  topic: string;\n  tone: 'professional' | 'casual' | 'humorous' | 'informative';\n  length: 'short' | 'medium' | 'long';\n  includeHashtags: boolean;\n  platform: string;\n}\n\nexport function SocialMedia({ socket }: SocialMediaProps) {\n  const [platforms, setPlatforms] = useState<Platform[]>([]);\n  const [postData, setPostData] = useState<PostData>({\n    content: '',\n    platform: 'twitter',\n    mediaFiles: []\n  });\n  const [contentOptions, setContentOptions] = useState<ContentGenerationOptions>({\n    topic: '',\n    tone: 'professional',\n    length: 'medium',\n    includeHashtags: true,\n    platform: 'twitter'\n  });\n  const [isPosting, setIsPosting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<any>(null);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [isContentDialogOpen, setIsContentDialogOpen] = useState(false);\n  const [isAnalysisDialogOpen, setIsAnalysisDialogOpen] = useState(false);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Mock platforms data\n    const mockPlatforms: Platform[] = [\n      {\n        name: 'twitter',\n        displayName: 'Twitter',\n        available: true,\n        features: ['post', 'media', 'engagement'],\n        limits: {\n          textLength: 280,\n          mediaCount: 4,\n          mediaSize: '5MB'\n        }\n      },\n      {\n        name: 'instagram',\n        displayName: 'Instagram',\n        available: false,\n        features: ['post', 'media'],\n        limits: {\n          textLength: 2200,\n          mediaCount: 10,\n          mediaSize: '100MB'\n        },\n        note: 'Requires Business API setup'\n      },\n      {\n        name: 'linkedin',\n        displayName: 'LinkedIn',\n        available: false,\n        features: ['post', 'media'],\n        limits: {\n          textLength: 1300,\n          mediaCount: 9,\n          mediaSize: '100MB'\n        },\n        note: 'Not yet implemented'\n      }\n    ];\n\n    setPlatforms(mockPlatforms);\n\n    const handlePostResult = (result: any) => {\n      setIsPosting(false);\n      console.log('Post result:', result);\n    };\n\n    const handleContentGenerated = (result: any) => {\n      setIsGenerating(false);\n      setPostData({ ...postData, content: result.content });\n    };\n\n    const handleImageAnalyzed = (result: any) => {\n      setIsAnalyzing(false);\n      setAnalysisResult(result.analysis);\n    };\n\n    const handleError = (error: { message: string }) => {\n      setIsPosting(false);\n      setIsGenerating(false);\n      setIsAnalyzing(false);\n      console.error('Social media error:', error.message);\n    };\n\n    socket.on('social:posted', handlePostResult);\n    socket.on('social:content_generated', handleContentGenerated);\n    socket.on('social:image_analyzed', handleImageAnalyzed);\n    socket.on('error', handleError);\n\n    return () => {\n      socket.off('social:posted', handlePostResult);\n      socket.off('social:content_generated', handleContentGenerated);\n      socket.off('social:image_analyzed', handleImageAnalyzed);\n      socket.off('error', handleError);\n    };\n  }, [socket]);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setSelectedFiles(files);\n    setPostData({ ...postData, mediaFiles: files });\n  };\n\n  const postToSocialMedia = async () => {\n    if (!socket || !postData.content || !postData.platform) return;\n\n    setIsPosting(true);\n    \n    // Create FormData for file upload\n    const formData = new FormData();\n    formData.append('content', postData.content);\n    formData.append('platform', postData.platform);\n    \n    postData.mediaFiles.forEach((file, index) => {\n      formData.append(`media`, file);\n    });\n\n    try {\n      const response = await fetch(`http://localhost:3001/api/social/post/${postData.platform}`, {\n        method: 'POST',\n        body: formData\n      });\n      \n      const result = await response.json();\n      console.log('Post result:', result);\n      \n      if (result.success) {\n        setPostData({ content: '', platform: 'twitter', mediaFiles: [] });\n        setSelectedFiles([]);\n      }\n    } catch (error) {\n      console.error('Post failed:', error);\n    } finally {\n      setIsPosting(false);\n    }\n  };\n\n  const generateContent = async () => {\n    if (!socket || !contentOptions.topic) return;\n\n    setIsGenerating(true);\n    \n    try {\n      const response = await fetch('http://localhost:3001/api/social/content/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(contentOptions)\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        setPostData({ ...postData, content: result.content });\n        setIsContentDialogOpen(false);\n      }\n    } catch (error) {\n      console.error('Content generation failed:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const analyzeImage = async (file: File) => {\n    if (!socket) return;\n\n    setIsAnalyzing(true);\n    \n    const formData = new FormData();\n    formData.append('image', file);\n\n    try {\n      const response = await fetch('http://localhost:3001/api/social/analyze/image', {\n        method: 'POST',\n        body: formData\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        setAnalysisResult(result.analysis);\n        setIsAnalysisDialogOpen(true);\n      }\n    } catch (error) {\n      console.error('Image analysis failed:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    switch (platform) {\n      case 'twitter':\n        return <Twitter className=\"h-4 w-4\" />;\n      case 'instagram':\n        return <Instagram className=\"h-4 w-4\" />;\n      case 'linkedin':\n        return <Linkedin className=\"h-4 w-4\" />;\n      default:\n        return <Share2 className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getCharacterCount = () => {\n    const platform = platforms.find(p => p.name === postData.platform);\n    return platform ? platform.limits.textLength : 280;\n  };\n\n  const getRemainingChars = () => {\n    return getCharacterCount() - postData.content.length;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Platform Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Share2 className=\"h-5 w-5\" />\n            Social Media Manager\n          </CardTitle>\n          <CardDescription>\n            Post content across multiple social media platforms\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {platforms.map((platform) => (\n              <Card key={platform.name} className={`p-4 ${\n                platform.available ? 'border-green-200' : 'border-gray-200'\n              }`}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {getPlatformIcon(platform.name)}\n                    <span className=\"font-medium\">{platform.displayName}</span>\n                  </div>\n                  <Badge variant={platform.available ? 'default' : 'secondary'}>\n                    {platform.available ? 'Active' : 'Inactive'}\n                  </Badge>\n                </div>\n                \n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  <div>Limit: {platform.limits.textLength} chars</div>\n                  <div>Media: {platform.limits.mediaCount} files</div>\n                  <div>Size: {platform.limits.mediaSize}</div>\n                  {platform.note && (\n                    <div className=\"text-yellow-600\">{platform.note}</div>\n                  )}\n                </div>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content Creation */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Post Composer */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Create Post</CardTitle>\n            <CardDescription>\n              Compose and publish social media content\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Platform Selection */}\n            <div className=\"space-y-2\">\n              <Label>Platform</Label>\n              <Select value={postData.platform} onValueChange={(value) => \n                setPostData({ ...postData, platform: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {platforms.filter(p => p.available).map((platform) => (\n                    <SelectItem key={platform.name} value={platform.name}>\n                      <div className=\"flex items-center gap-2\">\n                        {getPlatformIcon(platform.name)}\n                        {platform.displayName}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Content Input */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Content</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Dialog open={isContentDialogOpen} onOpenChange={setIsContentDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Sparkles className=\"h-4 w-4 mr-2\" />\n                        Generate\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Generate Content</DialogTitle>\n                        <DialogDescription>\n                          AI-powered content generation for social media\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid gap-2\">\n                          <Label>Topic</Label>\n                          <Input\n                            value={contentOptions.topic}\n                            onChange={(e) => setContentOptions({ ...contentOptions, topic: e.target.value })}\n                            placeholder=\"What do you want to post about?\"\n                          />\n                        </div>\n                        \n                        <div className=\"grid gap-2\">\n                          <Label>Tone</Label>\n                          <Select value={contentOptions.tone} onValueChange={(value: any) => \n                            setContentOptions({ ...contentOptions, tone: value })}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"professional\">Professional</SelectItem>\n                              <SelectItem value=\"casual\">Casual</SelectItem>\n                              <SelectItem value=\"humorous\">Humorous</SelectItem>\n                              <SelectItem value=\"informative\">Informative</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div className=\"grid gap-2\">\n                          <Label>Length</Label>\n                          <Select value={contentOptions.length} onValueChange={(value: any) => \n                            setContentOptions({ ...contentOptions, length: value })}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"short\">Short</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"long\">Long</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Switch\n                            id=\"hashtags\"\n                            checked={contentOptions.includeHashtags}\n                            onCheckedChange={(checked) => \n                              setContentOptions({ ...contentOptions, includeHashtags: checked })}\n                          />\n                          <Label htmlFor=\"hashtags\">Include hashtags</Label>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"outline\" onClick={() => setIsContentDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button onClick={generateContent} disabled={isGenerating || !contentOptions.topic}>\n                          {isGenerating ? 'Generating...' : 'Generate'}\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                  \n                  <span className={`text-sm ${\n                    getRemainingChars() < 0 ? 'text-red-500' : \n                    getRemainingChars() < 50 ? 'text-yellow-500' : 'text-muted-foreground'\n                  }`}>\n                    {getRemainingChars()}\n                  </span>\n                </div>\n              </div>\n              \n              <Textarea\n                value={postData.content}\n                onChange={(e) => setPostData({ ...postData, content: e.target.value })}\n                placeholder=\"What's happening?\"\n                rows={6}\n                maxLength={getCharacterCount()}\n              />\n            </div>\n            \n            {/* Media Upload */}\n            <div className=\"space-y-2\">\n              <Label>Media</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  type=\"file\"\n                  multiple\n                  accept=\"image/*,video/*\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  id=\"media-upload\"\n                />\n                <Label htmlFor=\"media-upload\" className=\"cursor-pointer\">\n                  <div className=\"flex items-center gap-2 px-4 py-2 border border-dashed border-gray-300 rounded-lg hover:border-gray-400 transition-colors\">\n                    <Upload className=\"h-4 w-4\" />\n                    <span>Upload media</span>\n                  </div>\n                </Label>\n                \n                {selectedFiles.length > 0 && (\n                  <span className=\"text-sm text-muted-foreground\">\n                    {selectedFiles.length} file(s) selected\n                  </span>\n                )}\n              </div>\n              \n              {selectedFiles.length > 0 && (\n                <div className=\"space-y-2\">\n                  {selectedFiles.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-muted/50 rounded\">\n                      <div className=\"flex items-center gap-2\">\n                        <ImageIcon className=\"h-4 w-4\" />\n                        <span className=\"text-sm\">{file.name}</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          ({formatFileSize(file.size)})\n                        </span>\n                      </div>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => analyzeImage(file)}\n                        disabled={isAnalyzing}\n                      >\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        {isAnalyzing ? 'Analyzing...' : 'Analyze'}\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Scheduling */}\n            <div className=\"space-y-2\">\n              <Label>Schedule (Optional)</Label>\n              <Input\n                type=\"datetime-local\"\n                value={postData.scheduledFor}\n                onChange={(e) => setPostData({ ...postData, scheduledFor: e.target.value })}\n              />\n            </div>\n            \n            {/* Post Button */}\n            <Button \n              onClick={postToSocialMedia}\n              disabled={isPosting || !postData.content || getRemainingChars() < 0}\n              className=\"w-full\"\n            >\n              {isPosting ? (\n                'Posting...'\n              ) : postData.scheduledFor ? (\n                <>\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Schedule Post\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Post Now\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Analytics & Insights */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Analytics</CardTitle>\n            <CardDescription>\n              Performance metrics and insights\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Mock engagement data */}\n            <div className=\"grid gap-4\">\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Heart className=\"h-4 w-4 text-red-500\" />\n                  <span className=\"text-sm font-medium\">Likes</span>\n                </div>\n                <span className=\"text-lg font-bold\">1.2K</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Repeat2 className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium\">Retweets</span>\n                </div>\n                <span className=\"text-lg font-bold\">234</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <MessageCircle className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">Replies</span>\n                </div>\n                <span className=\"text-lg font-bold\">89</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4 text-purple-500\" />\n                  <span className=\"text-sm font-medium\">Impressions</span>\n                </div>\n                <span className=\"text-lg font-bold\">15.7K</span>\n              </div>\n            </div>\n            \n            <Separator />\n            \n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>Last updated: 2 hours ago</p>\n              <p>Engagement rate: 8.2%</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Image Analysis Dialog */}\n      {analysisResult && (\n        <Dialog open={isAnalysisDialogOpen} onOpenChange={setIsAnalysisDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Image Analysis Results</DialogTitle>\n              <DialogDescription>\n                AI-powered analysis of your uploaded image\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {analysisResult.description && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {analysisResult.description}\n                  </p>\n                </div>\n              )}\n              \n              {analysisResult.tags && analysisResult.tags.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Tags</Label>\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                    {analysisResult.tags.slice(0, 10).map((tag: string, index: number) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {analysisResult.objects && analysisResult.objects.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Detected Objects</Label>\n                  <div className=\"space-y-1 mt-1\">\n                    {analysisResult.objects.slice(0, 5).map((obj: any, index: number) => (\n                      <div key={index} className=\"flex justify-between text-sm\">\n                        <span>{obj.name}</span>\n                        <span className=\"text-muted-foreground\">\n                          {Math.round(obj.confidence * 100)}%\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {analysisResult.text && analysisResult.text.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Text Found</Label>\n                  <div className=\"space-y-1 mt-1\">\n                    {analysisResult.text.slice(0, 3).map((text: string, index: number) => (\n                      <p key={index} className=\"text-sm text-muted-foreground\">\n                        \"{text}\"\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button onClick={() => setIsAnalysisDialogOpen(false)}>\n                Close\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}", "old_string": "// SocialMedia content goes here"}]