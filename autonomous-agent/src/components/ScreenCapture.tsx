import { useState, useEffect } from 'react';
import { Socket } from 'socket.io-client';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Camera, 
  Play, 
  Pause, 
  Download, 
  Trash2, 
  Eye, 
  Settings,\n  Image,\n  Monitor,\n  Crop,\n  Zap,\n  Maximize,\n  RotateCcw\n} from 'lucide-react';\n\ninterface ScreenCaptureProps {\n  socket: Socket | null;\n}\n\ninterface CaptureOptions {\n  format?: 'png' | 'jpg' | 'webp';\n  quality?: number;\n  screen?: number;\n  crop?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  resize?: {\n    width: number;\n    height: number;\n  };\n}\n\ninterface Screenshot {\n  filename: string;\n  filepath: string;\n  size: number;\n  createdAt: Date;\n  modifiedAt: Date;\n}\n\nexport function ScreenCapture({ socket }: ScreenCaptureProps) {\n  const [screenshots, setScreenshots] = useState<Screenshot[]>([]);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [liveCapture, setLiveCapture] = useState(false);\n  const [captureOptions, setCaptureOptions] = useState<CaptureOptions>({\n    format: 'png',\n    quality: 90,\n    screen: 0\n  });\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [isOptionsDialogOpen, setIsOptionsDialogOpen] = useState(false);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Mock initial screenshots\n    const mockScreenshots: Screenshot[] = [\n      {\n        filename: 'screenshot_1.png',\n        filepath: '/uploads/screenshot_1.png',\n        size: 245760,\n        createdAt: new Date(Date.now() - 300000),\n        modifiedAt: new Date(Date.now() - 300000)\n      },\n      {\n        filename: 'screenshot_2.png',\n        filepath: '/uploads/screenshot_2.png',\n        size: 198432,\n        createdAt: new Date(Date.now() - 600000),\n        modifiedAt: new Date(Date.now() - 600000)\n      }\n    ];\n\n    setScreenshots(mockScreenshots);\n\n    const handleScreenCaptured = (result: any) => {\n      setIsCapturing(false);\n      const newScreenshot: Screenshot = {\n        filename: result.capture.filename,\n        filepath: result.capture.filepath,\n        size: result.capture.metadata.size,\n        createdAt: new Date(),\n        modifiedAt: new Date()\n      };\n      setScreenshots(prev => [newScreenshot, ...prev]);\n    };\n\n    const handleLiveFrame = (frame: any) => {\n      // Handle live capture frames\n      console.log('Live frame received:', frame.timestamp);\n    };\n\n    const handleLiveStarted = () => {\n      setLiveCapture(true);\n    };\n\n    const handleLiveStopped = () => {\n      setLiveCapture(false);\n    };\n\n    const handleError = (error: { message: string }) => {\n      setIsCapturing(false);\n      console.error('Screen capture error:', error.message);\n    };\n\n    socket.on('screen:captured', handleScreenCaptured);\n    socket.on('screen:live:frame', handleLiveFrame);\n    socket.on('screen:live:started', handleLiveStarted);\n    socket.on('screen:live:stopped', handleLiveStopped);\n    socket.on('error', handleError);\n\n    return () => {\n      socket.off('screen:captured', handleScreenCaptured);\n      socket.off('screen:live:frame', handleLiveFrame);\n      socket.off('screen:live:started', handleLiveStarted);\n      socket.off('screen:live:stopped', handleLiveStopped);\n      socket.off('error', handleError);\n    };\n  }, [socket]);\n\n  const captureScreen = () => {\n    if (!socket) return;\n    setIsCapturing(true);\n    socket.emit('screen:capture', captureOptions);\n  };\n\n  const toggleLiveCapture = () => {\n    if (!socket) return;\n    if (liveCapture) {\n      socket.emit('screen:live:stop');\n    } else {\n      socket.emit('screen:live:start');\n    }\n  };\n\n  const deleteScreenshot = (filename: string) => {\n    setScreenshots(prev => prev.filter(s => s.filename !== filename));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Control Panel */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Camera className=\"h-5 w-5\" />\n                Screen Capture\n              </CardTitle>\n              <CardDescription>\n                Capture screenshots and monitor screen activity\n              </CardDescription>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Dialog open={isOptionsDialogOpen} onOpenChange={setIsOptionsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Options\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                  <DialogHeader>\n                    <DialogTitle>Capture Options</DialogTitle>\n                    <DialogDescription>\n                      Configure screenshot capture settings\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid gap-2\">\n                      <Label>Format</Label>\n                      <Select value={captureOptions.format} onValueChange={(value: 'png' | 'jpg' | 'webp') => \n                        setCaptureOptions({...captureOptions, format: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"png\">PNG (Lossless)</SelectItem>\n                          <SelectItem value=\"jpg\">JPEG (Compressed)</SelectItem>\n                          <SelectItem value=\"webp\">WebP (Modern)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    {(captureOptions.format === 'jpg' || captureOptions.format === 'webp') && (\n                      <div className=\"grid gap-2\">\n                        <Label>Quality: {captureOptions.quality}%</Label>\n                        <Slider\n                          value={[captureOptions.quality || 90]}\n                          onValueChange={([value]) => setCaptureOptions({...captureOptions, quality: value})}\n                          max={100}\n                          min={1}\n                          step={1}\n                          className=\"w-full\"\n                        />\n                      </div>\n                    )}\n                    \n                    <div className=\"grid gap-2\">\n                      <Label>Screen Display</Label>\n                      <Select value={String(captureOptions.screen || 0)} onValueChange={(value) => \n                        setCaptureOptions({...captureOptions, screen: parseInt(value)})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"0\">Primary Display</SelectItem>\n                          <SelectItem value=\"1\">Secondary Display</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div className=\"space-y-4\">\n                      <Label className=\"text-sm font-medium\">Resize Options</Label>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                          <Label className=\"text-xs\">Width</Label>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Auto\"\n                            value={captureOptions.resize?.width || ''}\n                            onChange={(e) => {\n                              const width = parseInt(e.target.value) || undefined;\n                              setCaptureOptions({\n                                ...captureOptions,\n                                resize: width ? { ...captureOptions.resize, width } : undefined\n                              });\n                            }}\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs\">Height</Label>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Auto\"\n                            value={captureOptions.resize?.height || ''}\n                            onChange={(e) => {\n                              const height = parseInt(e.target.value) || undefined;\n                              setCaptureOptions({\n                                ...captureOptions,\n                                resize: height ? { ...captureOptions.resize, height } : undefined\n                              });\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsOptionsDialogOpen(false)}>\n                      Close\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Main Controls */}\n          <div className=\"flex items-center gap-4\">\n            <Button \n              onClick={captureScreen} \n              disabled={isCapturing}\n              className=\"flex-1\"\n            >\n              <Camera className=\"h-4 w-4 mr-2\" />\n              {isCapturing ? 'Capturing...' : 'Take Screenshot'}\n            </Button>\n            \n            <Button \n              variant={liveCapture ? 'destructive' : 'outline'}\n              onClick={toggleLiveCapture}\n              className=\"flex-1\"\n            >\n              {liveCapture ? (\n                <>\n                  <Pause className=\"h-4 w-4 mr-2\" />\n                  Stop Live\n                </>\n              ) : (\n                <>\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Start Live\n                </>\n              )}\n            </Button>\n          </div>\n          \n          {/* Status */}\n          <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className={`h-2 w-2 rounded-full ${\n                liveCapture ? 'bg-red-500 animate-pulse' : \n                isCapturing ? 'bg-yellow-500' : 'bg-gray-400'\n              }`} />\n              <span className=\"text-sm font-medium\">\n                {liveCapture ? 'Live Capture Active' : \n                 isCapturing ? 'Capturing...' : 'Ready'}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              <span>Format: {captureOptions.format?.toUpperCase()}</span>\n              {captureOptions.quality && (\n                <span>Quality: {captureOptions.quality}%</span>\n              )}\n              <span>Display: {captureOptions.screen === 0 ? 'Primary' : 'Secondary'}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Screenshots Gallery */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Screenshots ({screenshots.length})</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Cleanup\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-[400px]\">\n            {screenshots.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Image className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p>No screenshots yet</p>\n                <p className=\"text-sm\">Take your first screenshot to get started</p>\n              </div>\n            ) : (\n              <div className=\"grid gap-4 p-6 md:grid-cols-2 lg:grid-cols-3\">\n                {screenshots.map((screenshot) => (\n                  <Card key={screenshot.filename} className=\"overflow-hidden\">\n                    <div className=\"aspect-video bg-muted/50 flex items-center justify-center\">\n                      <img \n                        src={`http://localhost:3001${screenshot.filepath}`}\n                        alt={screenshot.filename}\n                        className=\"max-w-full max-h-full object-contain cursor-pointer\"\n                        onClick={() => setSelectedImage(`http://localhost:3001${screenshot.filepath}`)}\n                        onError={(e) => {\n                          e.currentTarget.style.display = 'none';\n                          e.currentTarget.nextElementSibling!.style.display = 'flex';\n                        }}\n                      />\n                      <div className=\"hidden flex-col items-center justify-center text-muted-foreground\">\n                        <Image className=\"h-8 w-8 mb-2\" />\n                        <span className=\"text-sm\">Preview unavailable</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-3\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-medium text-sm truncate\">\n                            {screenshot.filename}\n                          </h4>\n                          <div className=\"text-xs text-muted-foreground space-y-1\">\n                            <div>{formatFileSize(screenshot.size)}</div>\n                            <div>{formatTime(screenshot.createdAt)}</div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex flex-col gap-1\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedImage(`http://localhost:3001${screenshot.filepath}`)}\n                          >\n                            <Eye className=\"h-3 w-3\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              const link = document.createElement('a');\n                              link.href = `http://localhost:3001${screenshot.filepath}`;\n                              link.download = screenshot.filename;\n                              link.click();\n                            }}\n                          >\n                            <Download className=\"h-3 w-3\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => deleteScreenshot(screenshot.filename)}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </ScrollArea>\n        </CardContent>\n      </Card>\n\n      {/* Image Preview Dialog */}\n      {selectedImage && (\n        <Dialog open={!!selectedImage} onOpenChange={() => setSelectedImage(null)}>\n          <DialogContent className=\"sm:max-w-[800px] max-h-[80vh]\">\n            <DialogHeader>\n              <DialogTitle>Screenshot Preview</DialogTitle>\n            </DialogHeader>\n            <div className=\"flex justify-center\">\n              <img \n                src={selectedImage} \n                alt=\"Screenshot preview\"\n                className=\"max-w-full max-h-[60vh] object-contain\"\n              />\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  const link = document.createElement('a');\n                  link.href = selectedImage;\n                  link.download = 'screenshot.png';\n                  link.click();\n                }}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button onClick={() => setSelectedImage(null)}>\n                Close\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}", "old_string": "// ScreenCapture content goes here"}]