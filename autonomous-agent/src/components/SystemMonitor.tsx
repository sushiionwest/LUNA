import { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Cpu, \n  HardDrive, \n  Memory, \n  Network, \n  Database, \n  Server,\n  Activity,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  RefreshCw,\n  Wifi,\n  Eye,\n  Download,\n  Trash2\n} from 'lucide-react';\n\ninterface SystemMonitorProps {\n  socket: Socket | null;\n}\n\ninterface SystemStatus {\n  server: {\n    uptime: number;\n    memory: {\n      used: number;\n      total: number;\n      external: number;\n      rss: number;\n    };\n    cpu: {\n      user: number;\n      system: number;\n    };\n    platform: string;\n    nodeVersion: string;\n    environment: string;\n  };\n  services: {\n    database: boolean;\n    screenCapture: boolean;\n    socketConnections: number;\n  };\n  storage: {\n    fileCount: number;\n    totalSize: number;\n    averageSize: number;\n    oldestFile: Date | null;\n    newestFile: Date | null;\n  };\n  performance: {\n    totalTasks: number;\n    successfulTasks: number;\n    failedTasks: number;\n    currentTasks: number;\n  };\n}\n\ninterface LogEntry {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  category: 'system' | 'agent' | 'user' | 'api';\n  message: string;\n  details?: string;\n  timestamp: Date;\n  source: string;\n}\n\nexport function SystemMonitor({ socket }: SystemMonitorProps) {\n  const [systemStatus, setSystemStatus] = useState<SystemStatus | null>(null);\n  const [logs, setLogs] = useState<LogEntry[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [selectedLogLevel, setSelectedLogLevel] = useState<string>('all');\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Mock system status\n    const mockStatus: SystemStatus = {\n      server: {\n        uptime: 3600000, // 1 hour\n        memory: {\n          used: 52428800, // 50MB\n          total: 134217728, // 128MB\n          external: 1048576, // 1MB\n          rss: 67108864 // 64MB\n        },\n        cpu: {\n          user: 123456,\n          system: 78901\n        },\n        platform: 'linux',\n        nodeVersion: 'v20.19.0',\n        environment: 'development'\n      },\n      services: {\n        database: true,\n        screenCapture: true,\n        socketConnections: 2\n      },\n      storage: {\n        fileCount: 15,\n        totalSize: 2097152, // 2MB\n        averageSize: 139810,\n        oldestFile: new Date(Date.now() - 86400000), // 1 day ago\n        newestFile: new Date()\n      },\n      performance: {\n        totalTasks: 42,\n        successfulTasks: 39,\n        failedTasks: 3,\n        currentTasks: 2\n      }\n    };\n\n    setSystemStatus(mockStatus);\n\n    // Mock log entries\n    const mockLogs: LogEntry[] = [\n      {\n        id: '1',\n        type: 'info',\n        category: 'system',\n        message: 'Server started successfully',\n        timestamp: new Date(Date.now() - 300000),\n        source: 'Server'\n      },\n      {\n        id: '2',\n        type: 'success',\n        category: 'agent',\n        message: 'Task completed: Weekly Screenshot',\n        details: 'Duration: 2.3s',\n        timestamp: new Date(Date.now() - 240000),\n        source: 'AgentService'\n      },\n      {\n        id: '3',\n        type: 'warning',\n        category: 'system',\n        message: 'High memory usage detected',\n        details: 'Memory usage: 85%',\n        timestamp: new Date(Date.now() - 180000),\n        source: 'MemoryMonitor'\n      },\n      {\n        id: '4',\n        type: 'error',\n        category: 'api',\n        message: 'Failed to connect to external API',\n        details: 'Twitter API rate limit exceeded',\n        timestamp: new Date(Date.now() - 120000),\n        source: 'SocialMediaService'\n      },\n      {\n        id: '5',\n        type: 'info',\n        category: 'system',\n        message: 'Screenshot cleanup completed',\n        details: 'Deleted 5 old files',\n        timestamp: new Date(Date.now() - 60000),\n        source: 'ScreenCaptureService'\n      }\n    ];\n\n    setLogs(mockLogs);\n\n    const handleSystemUpdate = (status: SystemStatus) => {\n      setSystemStatus(status);\n    };\n\n    const handleNewLog = (log: LogEntry) => {\n      setLogs(prev => [log, ...prev].slice(0, 100));\n    };\n\n    socket.on('system:status', handleSystemUpdate);\n    socket.on('system:log', handleNewLog);\n\n    // Request initial data\n    socket.emit('system:get_status');\n\n    return () => {\n      socket.off('system:status', handleSystemUpdate);\n      socket.off('system:log', handleNewLog);\n    };\n  }, [socket]);\n\n  const refreshSystemStatus = async () => {\n    setIsRefreshing(true);\n    \n    try {\n      const response = await fetch('http://localhost:3001/api/system/status');\n      const data = await response.json();\n      setSystemStatus(data);\n    } catch (error) {\n      console.error('Failed to refresh system status:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const formatUptime = (uptimeMs: number) => {\n    const seconds = Math.floor(uptimeMs / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;\n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getMemoryUsagePercent = () => {\n    if (!systemStatus) return 0;\n    return Math.round((systemStatus.server.memory.used / systemStatus.server.memory.total) * 100);\n  };\n\n  const getSuccessRate = () => {\n    if (!systemStatus || systemStatus.performance.totalTasks === 0) return 100;\n    return Math.round((systemStatus.performance.successfulTasks / systemStatus.performance.totalTasks) * 100);\n  };\n\n  const getServiceStatusIcon = (isHealthy: boolean) => {\n    return isHealthy ? (\n      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n    ) : (\n      <XCircle className=\"h-4 w-4 text-red-500\" />\n    );\n  };\n\n  const getLogIcon = (type: string) => {\n    switch (type) {\n      case 'error':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'success':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <Activity className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getLogBadgeVariant = (type: string) => {\n    switch (type) {\n      case 'error':\n        return 'destructive';\n      case 'warning':\n        return 'secondary';\n      case 'success':\n        return 'default';\n      default:\n        return 'outline';\n    }\n  };\n\n  const filteredLogs = logs.filter(log => {\n    if (selectedLogLevel === 'all') return true;\n    return log.type === selectedLogLevel || log.category === selectedLogLevel;\n  });\n\n  if (!systemStatus) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Activity className=\"h-8 w-8 mx-auto mb-2 animate-spin\" />\n          <p>Loading system status...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Server className=\"h-5 w-5\" />\n                System Monitor\n              </CardTitle>\n              <CardDescription>\n                Real-time system health and performance monitoring\n              </CardDescription>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              onClick={refreshSystemStatus}\n              disabled={isRefreshing}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* System Overview */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Cpu className=\"h-4 w-4\" />\n              CPU & Memory\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span>Memory Usage</span>\n                <span>{getMemoryUsagePercent()}%</span>\n              </div>\n              <Progress value={getMemoryUsagePercent()} className=\"h-2\" />\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                {formatBytes(systemStatus.server.memory.used)} / {formatBytes(systemStatus.server.memory.total)}\n              </div>\n            </div>\n            \n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex justify-between\">\n                <span>Platform:</span>\n                <span className=\"font-mono\">{systemStatus.server.platform}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Node.js:</span>\n                <span className=\"font-mono\">{systemStatus.server.nodeVersion}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Activity className=\"h-4 w-4\" />\n              Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span>Success Rate</span>\n                <span>{getSuccessRate()}%</span>\n              </div>\n              <Progress value={getSuccessRate()} className=\"h-2\" />\n            </div>\n            \n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex justify-between\">\n                <span>Total Tasks:</span>\n                <span className=\"font-mono\">{systemStatus.performance.totalTasks}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Active:</span>\n                <span className=\"font-mono\">{systemStatus.performance.currentTasks}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Failed:</span>\n                <span className=\"font-mono text-red-600\">{systemStatus.performance.failedTasks}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <HardDrive className=\"h-4 w-4\" />\n              Storage\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex justify-between\">\n                <span>Files:</span>\n                <span className=\"font-mono\">{systemStatus.storage.fileCount}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Total Size:</span>\n                <span className=\"font-mono\">{formatBytes(systemStatus.storage.totalSize)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Average:</span>\n                <span className=\"font-mono\">{formatBytes(systemStatus.storage.averageSize)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Wifi className=\"h-4 w-4\" />\n              Connections\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex justify-between\">\n                <span>WebSocket:</span>\n                <span className=\"font-mono\">{systemStatus.services.socketConnections}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Uptime:</span>\n                <span className=\"font-mono\">{formatUptime(systemStatus.server.uptime)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Environment:</span>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {systemStatus.server.environment}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Services Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Service Health</CardTitle>\n          <CardDescription>Status of core system services</CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                <Database className=\"h-4 w-4\" />\n                <span className=\"font-medium\">Database</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {getServiceStatusIcon(systemStatus.services.database)}\n                <Badge variant={systemStatus.services.database ? 'default' : 'destructive'}>\n                  {systemStatus.services.database ? 'Connected' : 'Disconnected'}\n                </Badge>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                <Eye className=\"h-4 w-4\" />\n                <span className=\"font-medium\">Screen Capture</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {getServiceStatusIcon(systemStatus.services.screenCapture)}\n                <Badge variant={systemStatus.services.screenCapture ? 'default' : 'destructive'}>\n                  {systemStatus.services.screenCapture ? 'Active' : 'Inactive'}\n                </Badge>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                <Network className=\"h-4 w-4\" />\n                <span className=\"font-medium\">WebSocket</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {getServiceStatusIcon(systemStatus.services.socketConnections > 0)}\n                <Badge variant={systemStatus.services.socketConnections > 0 ? 'default' : 'secondary'}>\n                  {systemStatus.services.socketConnections} clients\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* System Logs */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>System Logs</CardTitle>\n              <CardDescription>Recent system events and messages</CardDescription>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {['all', 'error', 'warning', 'success', 'info'].map((level) => (\n                <Button\n                  key={level}\n                  variant={selectedLogLevel === level ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedLogLevel(level)}\n                  className=\"text-xs h-7\"\n                >\n                  {level.charAt(0).toUpperCase() + level.slice(1)}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-[400px]\">\n            <div className=\"space-y-2 p-6\">\n              {filteredLogs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                  <p>No logs found</p>\n                  <p className=\"text-sm\">System events will appear here</p>\n                </div>\n              ) : (\n                filteredLogs.map((log) => (\n                  <div key={log.id} className=\"flex gap-3 p-3 rounded-lg border bg-muted/20\">\n                    <div className=\"flex-none mt-0.5\">\n                      {getLogIcon(log.type)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium leading-tight\">\n                            {log.message}\n                          </p>\n                          {log.details && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {log.details}\n                            </p>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-none flex flex-col items-end gap-1\">\n                          <Badge variant={getLogBadgeVariant(log.type)} className=\"text-xs\">\n                            {log.category}\n                          </Badge>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {log.timestamp.toLocaleTimeString()}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mt-2\">\n                        <span className=\"text-xs text-muted-foreground font-mono\">\n                          {log.source}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {log.timestamp.toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}", "old_string": "// SystemMonitor content goes here"}]