name: Luna Agent CI/CD Pipeline
# Implements Strategic Recommendation #4: Production Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd testing
        npm install
        pip install pytest playwright
        
    - name: Run unit tests
      run: |
        cd testing
        npm run test:unit
        
    - name: Run integration tests
      run: |
        cd testing
        npm run test:integration
        
    - name: Install Playwright browsers
      run: |
        cd testing
        npx playwright install
        
    - name: Run E2E tests
      run: |
        cd testing
        npm run test:e2e
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: testing/test-results/
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: testing/coverage/

  build-linux:
    name: Build Linux Installer
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd installer/linux
        npm install
        
    - name: Build Linux installer
      run: |
        cd installer/linux
        npm run build-linux
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: luna-linux-installer
        path: |
          installer/linux/dist/*.AppImage
          installer/linux/dist/*.deb
          installer/linux/dist/*.rpm

  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd installer/windows
        npm install
        
    - name: Build Windows installer
      run: |
        cd installer/windows
        npm run build-win
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: luna-windows-installer
        path: |
          installer/windows/dist/*.exe
          installer/windows/dist/*.msi
          installer/windows/dist/*.zip

  build-macos:
    name: Build macOS Installer
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd installer/macos
        npm install
        
    - name: Build macOS installer
      run: |
        cd installer/macos
        npm run build-mac
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: luna-macos-installer
        path: |
          installer/macos/dist/*.dmg
          installer/macos/dist/*.zip

  build-vm:
    name: Build Luna VM
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install VirtualBox
      run: |
        sudo apt update
        sudo apt install -y virtualbox virtualbox-ext-pack
        
    - name: Build VM assets
      run: |
        cd vm-assets/scripts
        chmod +x build-vm.sh
        # ./build-vm.sh  # Commented out for CI - requires manual OS installation
        
    - name: Package VM (simulation)
      run: |
        cd vm-assets/scripts
        chmod +x package-vm.sh
        echo "VM packaging would happen here in full implementation"
        
    - name: Upload VM metadata
      uses: actions/upload-artifact@v3
      with:
        name: luna-vm-assets
        path: vm-assets/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install k6
      run: |
        sudo apt update
        sudo apt install -y k6
        
    - name: Run performance tests
      run: |
        cd testing
        # k6 run performance/load-test.js  # Would run against deployed service
        echo "Performance testing configured"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # In real implementation:
        # - Deploy to staging infrastructure
        # - Update testing portal
        # - Trigger user acceptance tests

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, security-scan, performance-test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Copy all built installers
        find . -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \
               -o -name "*.exe" -o -name "*.msi" -o -name "*.dmg" \
               | xargs -I {} cp {} release-assets/
        
        # Create checksums
        cd release-assets
        sha256sum * > checksums.txt
        
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        
    - name: Deploy to CDN
      run: |
        echo "Deploying to production CDN"
        # In real implementation:
        # - Upload to AWS S3/CloudFront
        # - Update download URLs
        # - Notify users of new version
        
    - name: Update documentation
      run: |
        echo "Updating production documentation"
        # In real implementation:
        # - Update docs site
        # - Generate release notes
        # - Update API documentation

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "Sending deployment notifications"
        # In real implementation:
        # - Send Slack/Discord notifications
        # - Update status dashboard
        # - Email stakeholders